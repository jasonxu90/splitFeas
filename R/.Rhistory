double(length(1:5))
length(1:5)
double(5)
double
double(10)
mat.or.vec(2)
mat.or.vec(2.0)
mat.or.vec(2,2)
dot
x1 <- rnorm(1000)
x2 <- rnorm(1000)
system.time(sum(x1*x2))
system.time(t(x1)%*%x2)
x1 <- rnorm(10)
x1 <- rexp(10,1)
x2 <- rexp(10,1)
x1
x2
y <- x1
x < x2
y*log(y/x)+x-y
x <- x2
y*log(y/x)+x-y
y*log(y/x)+x-y
lol1 <- rnorm(100)
lol2 <- rnorm(100)
t(lol1)%*%lol2
system.time(t(lol1)%*%lol2)
lol2 <- rnorm(1000)
lol1 <- rnorm(1000)
system.time(t(lol1)%*%lol2)
system.time(t(lol1)%*%lol2)
lol1
system.time(t(lol1)%*%lol2)
system.time(sum(lol1*lol2)
)
library(Spl)
library(SplitFeasibility)
dg
backtrack
source('~/splitFeas/Code/split_feasibility/R/backtrack.r', echo=TRUE)
#' Backtracking Line Search
#'
#' Given a descent direction \code{backtrack} computes a step size that ensures sufficient decrease in an objective.
#'
#' @param x Current iterate
#' @param dx Descent direction
#' @param f objective function
#' @param df gradient of objective function
#' @param alpha sufficient decrease parameter
#' @param beta sufficient decrease parameter
#' @export
backtrack = cmpfun(function(x,dx,f,df,alpha=0.01,beta=0.5) {
t <- 1
g <- df(x)
u <- alpha*sum(g*dx)
k <- 1
repeat {
if (f(x + t*dx) <= f(x) + t*u) break
t <- beta*t
#print(paste0("backtrack ",k))
k <- k + 1
}
return(t)
})
backtrack
dg
#' Backtracking Line Search
#'
#' Given a descent direction \code{backtrack} computes a step size that ensures sufficient decrease in an objective.
#'
#' @param x Current iterate
#' @param dx Descent direction
#' @param f objective function
#' @param df gradient of objective function
#' @param alpha sufficient decrease parameter
#' @param beta sufficient decrease parameter
#' @export
backtrack = cmpfun(function(x,dx,f,df,alpha=0.01,beta=0.5) {
t <- 1
g <- df(x)
u <- alpha*sum(g*dx)
k <- 1
repeat {
if (f(x + t*dx) <= f(x) + t*u) break
t <- beta*t^2
#print(paste0("backtrack ",k))
k <- k + 1
}
return(t)
})
backtrack
forwardsolve
A <- matrix(c(1,2,5,3,1,4,7,5,3),3)
A
-solve(A)
-solve(A,c(1,2,3))
-solve(A)%*%c(1,2,3)
ddg
diag(4)
diag(5,3)
diag(5,4,4)
#' Compute the inverse approximate Hessian of the majorization using the Woodbury inversion formula.
#
#' \code{wood_inv} computes the inverse of the Hessian term of the majorization of the proximity function
#' using the Woodbury formula. The function \code{mmqn_step} invokes \code{wood_inv} instead of {ddg} if the argument
#' \code{woodbury=T}. This should be used when p << n.
#'
#'
#' @param x non-anchor point
#' @param v weights for first set of constraints
#' @param w weights for second set of constraints
#' @param hgrad Handle for output mapping Jacobian
#' @export
#' @examples
#' set.seed(12345)
#' n <- 10
#' p <- 2
#' x <- matrix(rnorm(p),p,1)
#' v <- 1
#' w <- 1
#' A <- matrix(rnorm(n*p),n,p)
#' hgrad <- function(x) {return(t(A))}
#' sol <- ddg(x,v,w,hgrad)
wood_inv = cmpfun(function(x,v,w,hgrad) {
p <- length(x)
vv <- sum(v); ww <- sum(w)
dh <- as.matrix(hgrad(x))
return( diag(1/vv, p, p) - ww/(vv^2)*dh %*% solve(diag(p) + ww/vv*t(dh) %*% dh, t(dh) )  )
})
pseudoinverse
